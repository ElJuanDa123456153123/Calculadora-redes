@page "/Atenuacion"
@using System.Globalization
@using Blazored.LocalStorage
@using CalculadoraRedes.Client.Models



@inject ILocalStorageService LocalStorage
@inject CalculadoraRedes.Client.Services.HistorialService HistorialService

<h3>Calculadora de Atenuaci√≥n</h3>

<div>
    <label>Potencia de transmisi√≥n OLT:</label>
    <select @bind="potenciaOLTSeleccion">
        <option value="3">3 dBm</option>
        <option value="4">4 dBm</option>
        <option value="5">5 dBm</option>
        <option value="otro">Otro..</option>
    </select>

    @if (potenciaOLTSeleccion == "otro")
    {
        <input type="number" step="0.1" @bind="potenciaOLTManual" placeholder="Ingresa potencia (dBm)" />
    }
</div>

<hr />

<!-- CONTENEDOR DE BLOQUES -->
<div style="display: flex; flex-wrap: wrap; gap: 16px;">

    @foreach (var bloque in bloques)
    {
        <div style="
            border: 1px solid gray;
            padding: 10px;
            border-radius: 10px;
            width: 250px;
            box-shadow: 2px 2px 6px rgba(0,0,0,0.1);
            background-color: #f9f9f9;
        ">
            <div style="display: flex; justify-content: space-between; align-items: center;">
                <h4>Bloque</h4>
                <button title="Eliminar bloque" @onclick="@(() => EliminarBloque(bloque))" style="background: none; border: none; font-size: 18px; cursor: pointer;">‚ùå</button>
            </div>

            <label>Splitters:</label>
            @foreach (var item in bloque.Splitters)
            {
                <div>
                    <select @bind="item.Valor" style="width: 100%;">
                        <option disabled selected value="0">Selecciona un Splitter</option>
                        <option value="3.6">1:2 (3.6 dB)</option>
                        <option value="7.2">1:4 (7.2 dB)</option>
                        <option value="11">1:8 (11 dB)</option>
                        <option value="14">1:16 (14 dB)</option>
                        <option value="17.5">1:32 (17.5 dB)</option>
                    </select>
                    <button @onclick="@(() => EliminarSplitter(bloque, item))">‚ùå</button>
                </div>
            }
            <button @onclick="@(() => AgregarSplitter(bloque))">‚ûï</button>

            <div>
                <label>Fusiones:</label>
                <input type="number" min="0" @bind="bloque.Fusiones" style="width: 100%;" />
            </div>
            <div>
                <label>Acopladores:</label>
                <input type="number" min="0" @bind="bloque.Acopladores" style="width: 100%;" />
            </div>
            <div>
                <label>Longitud del cable (m):</label>
                <input type="number" min="0" @bind="bloque.Longitud" style="width: 100%;" />
            </div>
        </div>
    }

    <!-- BOT√ìN PARA AGREGAR BLOQUE -->
    <div style="
        display: flex;
        justify-content: center;
        align-items: center;
        width: 250px;
        height: 180px;
        border: 2px dashed gray;
        border-radius: 10px;
     
    using CalculadoraRedes.Client.Services;
#line default
" @onclick="AgregarBloque">
        ‚ûï
    </div>
</div>

<br />
<button @onclick="CalcularAtenuacion">Calcular</button>

@if (resultado != null)
{
    <p><strong>Atenuaci√≥n total:</strong> @($"{resultado:F2}") dB</p>
    <p><strong>Potencia de recepci√≥n:</strong> @($"{(ObtenerPotenciaOLT() - resultado.Value):F2}") dBm</p>
}

@code {
    List<BloqueAtenuacion> bloques = new() { new BloqueAtenuacion() };

    string potenciaOLTSeleccion = "3";
    double? potenciaOLTManual = null;
    double? resultado = null;

    protected override async Task OnInitializedAsync()
    {
        var datosGuardados = await LocalStorage.GetItemAsync<List<BloqueAtenuacion>>("bloques");
        var potenciaGuardada = await LocalStorage.GetItemAsync<string>("potenciaOLT");
        var potenciaManual = await LocalStorage.GetItemAsync<double?>("potenciaManual");

        if (datosGuardados != null) bloques = datosGuardados;
        if (potenciaGuardada != null) potenciaOLTSeleccion = potenciaGuardada;
        if (potenciaManual != null) potenciaOLTManual = potenciaManual;
    }

    async Task GuardarEnLocalStorage()
    {
        await LocalStorage.SetItemAsync("bloques", bloques);
        await LocalStorage.SetItemAsync("potenciaOLT", potenciaOLTSeleccion);
        await LocalStorage.SetItemAsync("potenciaManual", potenciaOLTManual);
    }

    async Task AgregarBloque()
    {
        bloques.Add(new BloqueAtenuacion());
        await GuardarEnLocalStorage();
    }

    async Task AgregarSplitter(BloqueAtenuacion bloque)
    {
        bloque.Splitters.Add(new SplitterSeleccionado());
        await GuardarEnLocalStorage();
    }

    async Task EliminarSplitter(BloqueAtenuacion bloque, SplitterSeleccionado splitter)
    {
        if (bloque.Splitters.Count > 1)
        {
            bloque.Splitters.Remove(splitter);
            await GuardarEnLocalStorage();
        }
    }

    async Task EliminarBloque(BloqueAtenuacion bloque)
    {
        if (bloques.Count > 1)
        {
            bloques.Remove(bloque);
            await GuardarEnLocalStorage();
        }
    }

    double ObtenerPotenciaOLT()
    {
        if (potenciaOLTSeleccion == "otro")
        {
            return potenciaOLTManual ?? 0;
        }

        return double.Parse(potenciaOLTSeleccion, CultureInfo.InvariantCulture);
    }

async Task CalcularAtenuacion()
{
    double total = 0;

    double totalSplitters = 0;
    double totalFusiones = 0;
    double totalAcopladores = 0;
    double totalLongitud = 0;

    foreach (var bloque in bloques)
    {
        foreach (var splitter in bloque.Splitters)
        {
            if (double.TryParse(splitter.Valor, NumberStyles.Float, CultureInfo.InvariantCulture, out double valor))
            {
                totalSplitters += valor;
            }
        }

        totalFusiones += bloque.Fusiones;
        totalAcopladores += bloque.Acopladores;
        totalLongitud += bloque.Longitud;
    
    }

    double atenuacionFusiones = totalFusiones * 0.03;
    double atenuacionAcopladores = totalAcopladores * 0.5;
    double atenuacionFibra = (totalLongitud / 1000) * 0.2;

    total = totalSplitters + atenuacionFusiones + atenuacionAcopladores + atenuacionFibra;

    resultado = Math.Round(total, 2);

    await GuardarEnLocalStorage();

    // üîΩ Aqu√≠ se guarda en el historial
    HistorialService.Agregar(new CalculoAtenuacion
    {
        totalSplitters = totalSplitters,
        Fusiones = totalFusiones,
        Acopladores = totalAcopladores,
        LongitudCable = totalLongitud,
        AtenuacionFusiones = atenuacionFusiones,
        AtenuacionAcopladores = atenuacionAcopladores,
        AtenuacionFibra = atenuacionFibra,
        AtenuacionTotal = resultado.Value,
        PotenciaRecibida = ObtenerPotenciaOLT() - resultado.Value
    });
}
    
}
